AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: "Stack for instastories-houessou-com"

Globals:
  Function:
    Runtime: python3.8

Resources:
  storiesBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      BucketName: !Sub "hpf-${AWS::StackName}-data"

  EventsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${AWS::StackName}-events-table"
      AttributeDefinitions:
          - AttributeName: requestId
            AttributeType: S
      KeySchema:
        - AttributeName: requestId
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      StreamSpecification:
        StreamViewType: NEW_IMAGE
                       
  MainHttpApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      StageName: dev
      CorsConfiguration:
        AllowMethods:
          - GET
          - POST
          - DELETE
        AllowOrigins:
          - https://instastories.houessou.com
        AllowHeaders:
          - '*'
      # DefinitionBody: 
      #   'Fn::Transform':
      #     Name: 'AWS::Include'
      #     Parameters:
      #       Location: './MainHttpApi.yaml'

  recordEvents:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./
      Handler: record_events.lambda_handler
      Environment: 
        Variables:
          EVENTS_TABLE: !Ref EventsTable
      Events:
        getStoriesTaggedApi:
          Type: HttpApi
          Properties:
            ApiId: !Ref MainHttpApi
            Path: /{account_to_mention}/stories
            Method: GET
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - 'dynamodb:DescribeTable'
                - 'dynamodb:BatchWriteItem'
                - 'dynamodb:PutItem'
                - 'dynamodb:Query'
                - 'dynamodb:UpdateItem'
              Resource:
                - !GetAtt EventsTable.Arn
            - Effect: 'Allow'
              Action:
                - 'dynamodb:ListTables'
              Resource: '*'
              Condition: {}

  getStoriesTagged:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./
      Handler: instaScraper.get_stories_tagged.lambda_handler
      Timeout: 900
      Environment: 
        Variables:
          EVENTS_TABLE: !Ref EventsTable
          STORIES_BUCKET: !Ref storiesBucket
      Events:
        DynamoDBStreams:
          Type: DynamoDB
          Properties:
            Stream: !GetAtt EventsTable.StreamArn
            StartingPosition: TRIM_HORIZON
            BatchSize: 10
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - 'dynamodb:DescribeTable'
                - 'dynamodb:BatchWriteItem'
                - 'dynamodb:PutItem'
                - 'dynamodb:Query'
                - 'dynamodb:UpdateItem'
              Resource:
                - !GetAtt EventsTable.Arn
            - Effect: 'Allow'
              Action:
                - 'dynamodb:ListTables'
              Resource: '*'
              Condition: {}
            - Effect: Allow
              Action: 
                - 's3:PutObject'
                - 's3:GetObject'
                - 's3:ListBucket'
                - 's3:DeleteObject'
              Resource:
                - !GetAtt 'storiesBucket.Arn'
                - !Join ['', [!GetAtt 'storiesBucket.Arn', '/*']]
    
  retrieveStories:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./
      Handler: retrieve_stories.lambda_handler
      Environment: 
        Variables:
          EVENTS_TABLE: !Ref EventsTable
      Events:
        retrieveStoriesApi:
          Type: HttpApi
          Properties:
            ApiId: !Ref MainHttpApi
            Path: /{requestId}
            Method: GET
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - 'dynamodb:Query'
                - 'dynamodb:GetItem'
              Resource:
                - !GetAtt EventsTable.Arn
            - Effect: 'Allow'
              Action:
                - 'dynamodb:ListTables'
              Resource: '*'
              Condition: {}

Outputs:
  MainHttpApi:
    Value: !Join [ '', ['https://', !Ref MainHttpApi, '.execute-api.us-east-1.amazonaws.com/dev'] ]
    Export:
      Name: !Sub "${AWS::StackName}-MainHttpApiURL"
  StackName: 
    Value: !Sub "${AWS::StackName}"